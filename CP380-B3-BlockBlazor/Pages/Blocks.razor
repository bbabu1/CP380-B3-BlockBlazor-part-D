@page "/blocks"

<!-- TODO: Add using and inject statements -->
@using CP380_B3_BlockBlazor.Data
@using CP380_B1_BlockList.Models
@inject BlockService blockService
@inject MiningService miningService
<h3>Blocks</h3>

@if (blocklist == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-columns">

        <!-- TODO: Add cards for each block in the block list

                   Each card should show:
                        - the position in the chain (starting at 0)
                        - the hash
                        - the nonce
                        - the previous hash
          -->
          @foreach (var blck in blocklist)
                
                
                {

                <div class="card" style="width: 18rem;">

                <div class="card-body">

                        <h5 class="card-title">Hash: @blck.Hash</h5>
                       
                       <p class="card-text">Nonce: @blck.Nonce <br />  Previous Hash: @blck.PreviousHash</p>
                       
                       <a href="..." class="btn btn-primary">See More</a>

                </div>
                </div>

}

    <EditForm Model="@block" OnValidSubmit="@HandleValidSubmit">

        <button type="submit" class="btn btn-primary">Mining Block</button>
        </EditForm> </div>

}

@code {
    IEnumerable<Block> blocklist;
Block block;
    protected override async Task OnInitializedAsync()
    
    
    {
        // TODO: fetch blocks from the BlockService
       blocklist = await blockService.GetBlock();
   block = await miningService.MineBlock();}
   
   private async Task HandleValidSubmit()
            {


                var res = await blockService.SubmitNewBlockAsync(Dblock);

                blocklist = await blockService.GetBlock();
  
  }
  }
